import React from "react"


const CICD=()=>{

    return( <div>
        <h2>План конспекта</h2>
        <p>
        Неделя 1:

День 1: Введение в CI/CD

Что такое Continuous Integration и Continuous Delivery/Deployment
Основные принципы CI/CD
День 2: Git и GitHub

Как использовать Git для контроля версий кода
Создание репозитория на GitHub
День 3: Основы Jenkins

Установка Jenkins
Настройка простого проекта Jenkins
Обзор интерфейса Jenkins
День 4: Настройка CI Pipeline с помощью Jenkins

Описание Pipeline
Использование Jenkinsfile для создания Pipeline
День 5: Обзор инструментов для CI/CD

Обзор других инструментов CI/CD, таких как Travis CI, CircleCI и GitLab CI/CD
Сравнение их возможностей и цен
Неделя 2:

День 6: Настройка CD Pipeline с помощью Jenkins

Описание CD Pipeline
Использование Jenkinsfile для создания CD Pipeline
День 7: Дополнительные возможности Jenkins

Интеграция с JIRA и другими системами отслеживания ошибок
Использование Jenkins для автоматического тестирования приложений
День 8: Docker и Kubernetes

Что такое Docker и как использовать его для контейнеризации приложений
Что такое Kubernetes и как использовать его для оркестрации контейнеров
День 9: Настройка CD Pipeline с использованием Docker и Kubernetes

Как использовать Docker и Kubernetes в CD Pipeline
Описание шагов Pipeline, необходимых для развертывания приложения в Kubernetes
День 10: Проверка качества кода и стиля

Использование инструментов для проверки качества кода (например, ESLint или Prettier)
Как добавить эту функциональность в ваш CI/CD Pipeline
День 11: Мониторинг и логирование приложений

Что такое мониторинг и логирование
Использование инструментов мониторинга и логирования, таких как Prometheus и Grafana
День 12: Безопасность

Основы безопасности приложений
Использование инструментов для тестирования безопасности, таких как OWASP ZAP или SonarQube
День 13: Продвинутые техники

Введение в Blue-Green и Canary deployments
Использование Jenkins для создания Blue-Green и Canary deployments
День 14: Интеграция с облачными сервисами

Как интегрировать ваш CI/CD Pipeline с облачными сервисами, такими как AWS и GCP
День 15: Практика

Создание своего собственного CI/CD Pipeline для простого приложения
Тестирование и развертывание на локальном компьютере или в облачном сервисе
        </p>
<ul>
    <li>
        <h1>
        введениe в CI/CD.
        </h1>
        <p>
        CI/CD (Continuous Integration / Continuous Delivery или Continuous Deployment) - это процесс разработки программного обеспечения, который включает в себя автоматизацию сборки кода, тестирование и развертывание приложения. Цель CI/CD - ускорить процесс разработки, сократить время на развертывание изменений и улучшить качество продукта.

Continuous Integration - процесс, при котором разработчики регулярно интегрируют свой код в общий репозиторий, где он проверяется на наличие ошибок и конфликтов с уже имеющимся кодом. Если находятся проблемы, то они исправляются до того, как код будет добавлен в основной репозиторий.

Continuous Delivery (Continuous Deployment) - процесс, при котором код проходит автоматический пайплайн тестирования и развертывания на тестовый сервер или в окружение производства без участия человека.

CI/CD-процесс включает в себя использование специальных инструментов, таких как Jenkins, Travis CI, CircleCI, GitLab CI/CD и другие, которые облегчают процесс автоматизации сборки, тестирования и развертывания приложения.

Понимание концепции CI/CD позволяет разработчикам и командам DevOps ускорить и оптимизировать процесс разработки, достичь большей стабильности и надежности приложения, а также сократить время на выпуск новой функциональности.
        </p>
    </li>
    <li>
        <h1>Git и GitHub</h1>
        <p>
            `Git - это распределенная система контроля версий, которая используется для отслеживания изменений в коде. GitHub - это платформа для хостинга Git-репозиториев и работы с ними.

Основными преимуществами использования Git являются:

Можно сохранять разные версии кода и переключаться между ними
Легко отслеживать изменения в коде
Удобная работа в команде: каждый может работать со своей копией репозитория и объединять изменения в одну общую версию кода
Начнем с создания репозитория на GitHub:

Зайдите на сайт github.com и создайте аккаунт (если вы еще не зарегистрированы)
После регистрации зайдите в свой аккаунт и нажмите кнопку "Create a new repository"
Введите название вашего нового репозитория и описание
Выберите тип репозитория: public или private
Нажмите кнопку "Create repository"
После создания репозитория можно начать работать с Git. Основные команды Git:

git clone URL - клонирование удаленного репозитория на локальный компьютер
git add file - добавление файла в индекс (staging area) перед коммитом
git commit -m "Описание изменений" - создание коммита с описанием изменений
git push - отправка изменений на удаленный репозиторий
git pull - получение последних изменений из удаленного репозитория на локальный компьютер
git branch - показать список текущих веток
git checkout -b branch_name - создание новой ветки и переключение на нее
git merge branch_name - объединение изменений из другой ветки в текущую ветку
Эти команды помогут вам управлять версиями кода и работать с репозиторием на GitHub.`
        </p>
    </li>
    <li>
        <h1>
        основы инструмента Continuous Integration (CI) - Jenkins.
        </h1>
        <p>
        Jenkins - это популярный инструмент для автоматизации процессов разработки программного обеспечения, который предоставляет возможность создания и настройки CI/CD-пайплайнов. Jenkins позволяет собирать, тестировать и развертывать приложение автоматически, освобождая от необходимости выполнять эти задачи вручную.

Ниже приведены шаги по установке и настройке Jenkins:

Скачайте Jenkins из официального репозитория по ссылке https://www.jenkins.io/download/
Установите Jenkins согласно инструкции
Запустите Jenkins на локальном компьютере
Откройте браузер и перейдите по адресу http://localhost:8080/
Следуйте инструкциям для настройки Jenkins
После успешной установки и настройки Jenkins можно создать свой первый Job (задачу). Для этого нужно:

Нажмите кнопку "New Item" на главной странице Jenkins
Введите имя для вашего нового Job и выберите тип "Freestyle project"
Настройте параметры для вашего Job, такие как исходный код, тестирование и развертывание
Сохраните настройки Job
Создание Job - это только первый шаг в создании пайплайна CI/CD. Далее вам нужно определить, как будет выполняться ваш пайплайн.

Простой пример пайплайна Jenkins:

Сборка исходного кода из репозитория Git
Запуск автоматических тестов
Создание Docker-образа приложения
Развертывание Docker-образа в Kubernetes
Jenkins дает возможность определить различные этапы пайплайна и настроить их в соответствии с вашими потребностями. После настройки и запуска пайплайна Jenkins автоматически будет выполнять все задачи, которые были определены в нем.
        </p>
        <h2>разберемся подробнее с созданием пайплайна в Jenkins.</h2>
        <p>

Создание нового Job:
Как вы уже знаете, для создания нового Job нужно нажать кнопку "New Item" на главной странице Jenkins, ввести имя для вашего нового Job и выбрать тип "Freestyle project". После этого вы будете перенаправлены на страницу настройки параметров вашего Job.

Настройка параметров Job:
На странице настройки параметров вы можете настроить всю необходимую конфигурацию для вашего Job. В зависимости от вашей задачи вам может потребоваться настроить следующие параметры:

Исходный код: укажите репозиторий Git и ветку, из которой должен быть получен исходный код.
Сборка: укажите команды, которые нужно выполнить для сборки вашего приложения.
Тесты: укажите команды, которые нужно выполнить для автоматического тестирования вашего приложения.
Развертывание: укажите команды, которые нужно выполнить для развертывания вашего приложения.
Создание пайплайна:
После настройки параметров Job вы можете начать создавать свой первый пайплайн. Для этого перейдите на страницу "Pipeline" в настройках вашего Job и выберите тип пайплайна, который вы хотите создать.

Определение этапов пайплайна:
На странице настройки пайплайна вы можете определить различные этапы, которые нужно выполнить в вашем пайплайне. Например:

Checkout: с помощью этого этапа Jenkins будет клонировать ваш репозиторий Git и получать последние изменения в вашем исходном коде.
Build: этот этап отвечает за сборку вашего приложения.
Test: этот этап отвечает за автоматическое тестирование вашего приложения.
Deploy: этот этап отвечает за развертывание вашего приложения.
Запуск пайплайна: После того, как вы настроили свой пайплайн, вы можете сохранить его настройки и запустить пайплайн с помощью кнопки "Build Now". Jenkins будет автоматически выполнять все задачи, которые были определены в вашем пайплайне.</p>
    </li>
</ul>
        </div>
    )
}

export default CICD